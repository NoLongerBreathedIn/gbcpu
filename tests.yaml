- test: NOP
  state: &Base0 [0,0,0,0,0,0,0]
  instr: [0,0,0,0,0,0,0,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: &jiIP [0,x,0,x,x,x,1,0]
  id: &IIP [0,0,0]
  nextState: *Base0
- test: STSP0
  state: *Base0
  instr: [0,0,0,0,1,0,0,0]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [1,1,1,1]
  aluC: &CPR [0,0,0,0,1,0]
  set16: *jiIP
  id: *IIP
  nextState: &stsp0 [1,0,0,0,0,0,0]
- test: STSP1
  state: *stsp0
  bitsM: ""
  set8: [1,1,0,1]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: &stsp1 [1,0,0,0,0,0,1]
- test: STSP2
  state: *stsp1
  bitsM: ""
  set8: [1,1,0,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: &NCAA [0,x,0,x,0,0,0,0]
  nextState: &stsp2 [1,0,0,0,0,1,0]
- test: STSP3
  state: *stsp2
  bitsM: ""
  set8: [0,1,1,0]
  aluR: [1,1,1,0]
  aluC: *CPR
  set16: [0,x,0,x,1,0,0,0]
  id: [0,1,1]
  miscFlags: &jWT [x,0,0,0,1]
  nextState: &stsp3 [1,0,0,0,0,1,1]
- test: STSP4
  state: *stsp3
  bitsM: ""
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  miscFlags: *jWT
  nextState: *Base0
- test: STOP0
  state: *Base0
  instr: [0,0,0,1,0,0,0,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: &Stop [0,1,1,1,1,1,1]
- test: STOP1
  state: *Stop
  bitsM: ""
  set8: [0,1,1,0]
  set16: &NVC [0,x,0,x,x,x,0,0]
  nextState: *Base0
- test: JR0
  state: *Base0
  instr: [0,0,0,1,1,0,0,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: &jr0 [0,0,1,0,0,1,0]
- test: JR1
  state: *jr0
  bitsM: ""
  set8: [1,0,1,1]
  aluR: [1,0,0,1]
  aluL: [0,1]
  aluC: [1,1,1,0,1,0,1]
  set16: *NVC
  nextState: &jr1 [0,0,1,0,0,1,1]
- test: JR2
  state: *jr1
  bitsM: mc
  set8: [1,0,0,0]
  aluR: [1,0,0,0]
  aluC: &atb [1,1,0,m,1,0,c]
  set16: [0,x,0,x,x,x,0,1]
  nextState: *Base0
- test: JRCN0
  state: *Base0
  instr: [0,0,1,p,q,0,0,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: [1,0,0,0,1,p,q]
- test: JRCN1
  state: [1,0,0,0,1,k,l]
  bitsM: klz
  set8: [1,0,1,1]
  aluR: [1,0,0,1]
  aluL: [0,1]
  aluC: &add [1,1,1,0,1,0,0]
  set16: [0,x,0,x,x,x,'!z',0]
  i16: *IIP
  nextState: [0,0,z,0,0,z,z]
- test: LD160
  state: *Base0
  instr: [0,0,o,p,0,0,0,1]
  iFlag: 0
  set8: [1,1,0,1]
  set16: *jiIP
  id: *IIP
  nextState: [1,0,1,0,o,p,0]
- test: LD161
  state: [1,0,1,0,j,k,0]
  bitsM: jk
  set8: ['&jk',j,k,1]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: [1,0,1,0,j,k,1]
- test: LD162
  state: [1,0,1,0,j,k,1]
  bitsM: jk
  set8: ['&jk',j,k,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: *Base0  
- test: ADD160
  state: *Base0
  instr: [0,0,o,p,1,0,0,1]
  iFlag: 0
  set8: [0,1,0,1]
  aluR: ['&op',o,p,1]
  aluL: [1,1]
  aluC: *add
  fR: [1]
  fM: [0,0]
  set16: [0,x,0,x,x,x,0,0]
  nextState: &Base1 [0,0,0,0,0,0,1]
- test: ADD161
  state: *Base1
  instr: [0,0,o,p,1,0,0,1]
  bitsM: opc
  set8: [0,1,0,0]
  aluR: ['&op',o,p,0]
  aluL: [1,0]
  aluC: [1,1,1,0,1,0,c]
  fR: [1,0,1,1]
  fM: [0,0,1,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: STBD0
  state: *Base0
  instr: [0,0,0,p,0,0,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [0,1,1,1]
  aluC: *CPR
  set16: [0,x,0,x,1,1,0,0]
  b16: [0,p]
  nextState: [1,0,0,1,0,0,1]
- test: LDBD0
  state: *Base0
  instr: [0,0,0,p,1,0,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: [0,x,0,x,1,1,0,0]
  b16: [0,p]
  nextState: *Base1
- test: STID0
  state: *Base0
  instr: [0,0,1,p,0,0,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [0,1,1,1]
  aluC: *CPR
  set16: [1,0,0,x,1,1,0,0]
  b16: [1,0]
  id: [p,1,0]
  nextState: [1,0,0,1,0,0,1]
- test: LDID0
  state: *Base0
  instr: [0,0,1,p,1,0,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: [1,0,0,x,1,1,0,0]
  b16: [1,0]
  id: [p,1,0]
  nextState: *Base1
- test: LDCMP1
  state: *Base1
  instr: [0,0,o,p,1,0,1,0]
  bitsM: ""
  set8: [0,1,1,1]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: ID160
  state: *Base0
  instr: [0,0,o,p,q,0,1,1]
  iFlag: 0
  set8: ['&op',o,p,1]
  aluR: ['&op',o,p,1]
  aluC: [1,1,0,q,1,0,'!q']
  set16: *NVC
  nextState: *Base1
- test: ID161
  state: *Base1
  instr: [0,0,o,p,q,0,1,1]
  bitsM: opqc
  set8: ['&op',o,p,0]
  aluR: ['&op',o,p,0]
  aluC: [1,1,0,q,1,0,c]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: I8
  state: *Base0
  instr: [0,0,o,p,q,1,0,0]
  iFlag: 0
  cond: '!u'
  set8: [0,o,p,q]
  aluR: [0,o,p,q]
  aluC: [1,1,0,0,1,0,1]
  fR: [1,0,1,1]
  fM: [1,0,1,0]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: D8
  state: *Base0
  instr: [0,0,o,p,q,1,0,1]
  iFlag: 0
  cond: '!u'
  set8: [0,o,p,q]
  aluR: [0,o,p,q]
  aluC: [1,1,0,1,1,0,0]
  fS: [1,0,0]
  fR: [1,x,1,1]
  fM: [1,0,1,0]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: IDHL0
  state: *Base0
  instr: [0,0,1,1,0,1,0,t]
  iFlag: 0
  set8: [0,1,1,0]
  fS: [x,x,0]
  fR: [x,x,x,1]
  fM: [x,0,x,0]
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: *Base1
- test: IHL1
  state: *Base1
  instr: [0,0,1,1,0,1,0,0]
  set8: [0,1,1,0]
  aluR: [0,1,1,0]
  aluC: [1,1,0,0,1,0,1]
  fR: [1,0,1,1]
  fM: [1,0,1,0]
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: [1,0,0,1,0,0,1]
- test: DHL1
  state: *Base1
  instr: [0,0,1,1,0,1,0,1]
  set8: [0,1,1,0]
  aluR: [0,1,1,0]
  aluC: [1,1,0,1,1,0,0]
  fS: [1,0,0]
  fR: [1,x,1,1]
  fM: [1,0,1,0]
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: [1,0,0,1,0,0,1]
- test: LD80
  state: *Base0
  instr: [0,0,o,p,q,1,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: [1,0,1,1,o,p,q]
- test: LD81
  state: [1,0,1,1,j,k,l]
  bitsM: jkl
  cond: '!&&jk!l'
  set8: [0,j,k,l]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: LDHL1
  state: [1,0,1,1,1,1,0]
  bitsM: ""
  set8: [0,1,1,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: [1,0,0,0,0,1,1]
- test: RLCA
  state: *Base0
  instr: [0,0,0,0,0,1,1,1]
  iFlag: 0
  set8: [0,1,1,1]
  aluR: [0,1,1,1]
  aluC: &CRLC [0,1,1,0,1,0,0,0]
  fR: [0,0,0,1]
  fM: [x,0,x,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: RRCA
  state: *Base0
  instr: [0,0,0,0,1,1,1,1]
  iFlag: 0
  set8: [0,1,1,1]
  aluR: [0,1,1,1]
  aluC: &CRRC [0,1,1,0,1,0,1,0]
  fR: [0,0,0,1]
  fM: [x,0,x,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: RLA
  state: *Base0
  instr: [0,0,0,1,0,1,1,1]
  iFlag: 0
  bitsM: C
  set8: [0,1,1,1]
  aluR: [0,1,1,1]
  aluC: &CRL [0,1,1,0,0,C,0,0]
  fR: [0,0,0,1]
  fM: [x,0,x,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: RRA
  state: *Base0
  instr: [0,0,0,1,1,1,1,1]
  iFlag: 0
  bitsM: C
  set8: [0,1,1,1]
  aluR: [0,1,1,1]
  aluC: &CRR [0,1,0,C,1,0,1,0]
  fR: [0,0,0,1]
  fM: [x,0,x,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: DAA
  state: *Base0
  instr: [0,0,1,0,0,1,1,1]
  iFlag: 0
  bitsM: 'N'
  set8: [0,1,1,1]
  aluR: [1,0,1,1]
  aluL: [0,0]
  aluC: [1,1,1,0,1,'N','N']
  fR: [1,1,0,1]
  fM: [1,0,x,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: CPL
  state: *Base0
  instr: [0,0,1,0,1,1,1,1]
  iFlag: 0
  set8: [0,1,1,1]
  aluL: [0,0]
  aluC: [0,0,1,1,0,0]
  fS: [1,1,0]
  fR: [1,x,x,1]
  fM: [0,0,x,0]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: SCCF
  state: *Base0
  instr: [0,0,1,1,q,1,1,1]
  iFlag: 0
  bitsM: Cq
  set8: [0,1,1,1]
  aluL: [0,0]
  aluC: [0,0,1,0,0,0]
  fS: [0,0,'!&Cq']
  fR: [1,0,0,0]
  fM: [0,0]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: MV
  state: *Base0
  instr: [0,1,o,p,q,r,s,t]
  iFlag: 0
  cond: '!|uv'
  set8: [0,o,p,q]
  aluR: [0,r,s,t]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: LD0
  state: *Base0
  instr: [0,1,o,p,q,1,1,0]
  iFlag: 0
  cond: '!u'
  set8: [0,o,p,q]
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: *Base1
- test: LD1
  state: *Base1
  instr: [0,1,o,p,q,1,1,0]
  cond: '!u'
  set8: [0,o,p,q]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: ST0
  state: *Base0
  instr: [0,1,1,1,0,r,s,t]
  iFlag: 0
  cond: '!v'
  set8: [0,1,1,0]
  aluR: [0,r,s,t]
  aluC: *CPR
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: [0,0,0,1,0,1,0]
- test: HALT0
  state: *Base0
  instr: [0,1,1,1,0,1,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  miscFlags: [x,0,0,1,0]
  nextState: &Halt [0,1,1,1,1,1,0]
- test: HALT1
  state: *Halt
  bitsM: ""
  set8: [0,1,1,0]
  set16: *NVC
  nextState: *Base0
- test: MTHHL
  state: *Base0
  instr: [1,0,o,p,q,1,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  fS: [x,x,0]
  fR: [x,x,x,1]
  fM: [x,0,x,0]
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: *Base1
- test: ARTH
  state: [0,0,0,0,0,0,l]
  instr: [1,0,0,p,q,r,s,t]
  cond: '&|!Il!^vl' # Either on Base 1 or not interrupted.
  bitsM: lpqrstC
  set8: [0,1,1,1]
  aluR: [0,r,s,t]
  aluL: [0,0]
  aluC: [1,1,1,0,1,p,'^p&Cq']
  fS: [q,0,0]
  fR: [1,0,1,1]
  fM: [1,0,1,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: AOR
  state: [0,0,0,0,0,0,l]
  instr: [1,0,1,p,0,r,s,t]
  cond: '&|!Il!^vl'
  set8: [0,1,1,1]
  aluR: [0,r,s,t]
  aluL: [0,0]
  aluC: [1,0,1,p,1,p,x,p]
  fS: [0,'!p',0]
  fR: [1,0,0,0]
  fM: [1,0]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: XOR
  state: [0,0,0,0,0,0,l]
  instr: [1,0,1,0,1,r,s,t]
  cond: '&|!Il!^vl'
  set8: [0,1,1,1]
  aluR: [0,r,s,t]
  aluL: [0,0]
  aluC: [0,0,1,0,1,0]
  fR: [1,0,0,0]
  fM: [1,0]
  set16: *jiIP
  id: *IIP
  nextState: *Base0  
- test: CP
  state: [0,0,0,0,0,0,l]
  instr: [1,0,1,1,1,r,s,t]
  cond: '&|!Il!^vl'
  set8: [0,1,1,0]
  aluR: [0,r,s,t]
  aluL: [0,0]
  aluC: [1,1,1,0,1,1,1]
  fS: [1,0,0]
  fR: [1,x,1,1]
  fM: [1,0,1,1]
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: RETC0
  state: *Base0
  instr: [1,1,0,p,q,0,0,0]
  iFlag: 0
  bitsM: pqz
  set8: [0,1,1,0]
  set16: [0,x,z,0,1,0,0,0]
  id: &ISP [0,0,1]
  nextState: *Base1
- test: RETC1
  state: *Base1
  instr: [1,1,0,p,q,0,0,0]
  bitsM: pqz
  set8: [0,1,1,0]
  set16: [0,x,0,x,0,0,'!z',0]
  id: *IIP
  nextState: [0,0,0,0,0,z,z]
- test: RETC2
  state: &Base3 [0,0,0,0,0,1,1]
  instr: [1,1,0,p,q,0,0,0]
  bitsM: pqz
  cond: 'z'
  set8: [1,0,0,1]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *NVC
  nextState: [0,0,0,0,1,0,0]
- test: LDW0
  state: *Base0
  instr: [1,1,1,p,q,0,0,0]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [0,1,1,1]
  aluC: *CPR
  set16: [0,x,0,x,0,1,1,0]
  id: *IIP
  nextState: [1,0,0,1,p,q,0]
- test: LDH1
  state: [1,0,0,1,j,0,0]
  bitsm: Ij
  set8: [1,1,0,1]
  aluL: [0,1]
  aluC: [0,0,1,0,0,0]
  set16: *NCAA
  nextState: &LDH1 [1,0,0,1,j,0,1]
- test: LDH2
  state: *LDH1
  bitsM: j
  set8: [0,1,1,j]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  miscFlags: [x,0,0,0,'!j']
  nextState: *Base0
- test: ADSP1
  state: [1,0,0,1,j,1,0]
  bitsM: j
  set8: ['!j',1,'!j',1]
  aluR: [1,1,1,1]
  aluL: [0,1]
  aluC: *add
  fR: [0,0,1,1]
  fM: [x,0,1,1]
  set16: *NVC
  nextState: &adsp1 [1,0,0,1,j,1,1]
- test: ADSP2
  state: *adsp1
  bitsM: jmC
  set8: ['!j',1,'!j',0]
  aluR: [1,1,1,0]
  aluC: [1,1,0,m,1,0,C]
  set16: *jiIP
  nextState: [0,'!j',0,0,0,0,0]
- test: POP0
  state: *Base0
  instr: [1,1,o,p,0,0,0,1]
  iFlag: 0
  cond: '!&op'
  set8: [0,1,1,0]
  set16: &PP16 [0,x,1,0,1,0,0,0]
  id: *ISP
  nextState: *Base1
- test: POPAF0
  state: *Base0
  instr: [1,1,1,1,0,0,0,1]
  iFlag: 0
  set8: [0,1,1,0]
  fS: []
  fR: []
  fM: [] # it'll get set next step anyway.
  set16: *PP16
  id: *ISP
  nextState: *Base1
- test: POP1
  state: *Base1
  instr: [1,1,o,p,0,0,0,1]
  set8: [0,o,p,1]
  aluR: [0,1,1,0]
  aluC: *CPR
  fR: ['!u','!u','!u','!u']
  fM: [0,u,0,0]
  set16: *PP16
  id: *ISP
  nextState: *Base3
- test: POP2
  state: *Base3
  instr: [1,1,o,p,0,0,0,1]
  set8: [0,o,p,u]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: RET0
  state: *Base0
  instr: [1,1,0,p,1,0,0,1]
  iFlag: 0
  set8: [0,1,1,0]
  set16: &PP16 [0,x,1,0,1,0,0,0]
  id: *ISP
  nextState: *Base1
- test: RET1
  state: *Base1
  instr: [1,1,0,p,1,0,0,1]
  set8: [1,0,0,1]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *NVC
  nextState: [0,0,0,0,1,p,0]
- test: RET2
  state: [0,0,0,0,1,k,0]
  bitM: Ik
  set8: [1,0,0,0]
  set16: &PP16 [0,x,1,0,1,0,0,0]
  id: *ISP
  nextState: &ret1 [0,0,0,0,1,k,1]
- test: RET3
  state: *ret1
  bitM: Ik
  set8: [1,0,0,0]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *NVC
  miscFlags: [x,k,0,0,0]
  nextState: *Base0
- test: JPHL
  state: *Base0
  instr: [1,1,1,0,1,0,0,1]
  iFlag: 0
  set8: [0,1,1,0]
  set16: [0,x,0,x,x,x,1,1]
  b16: [1,0]
  nextState: *Base0
- test: LDSP
  state: *Base0
  instr: [1,1,1,1,1,0,0,1]
  iFlag: 0
  set8: [0,1,1,0]
  set16: [0,x,1,1,x,x,1,0]
  b16: [1,0]
  id: *IIP
  nextState: &nop [0,1,0,0,0,0,0]
- test: JPC0
  state: *Base0
  instr: [1,1,0,p,q,0,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: [1,1,1,0,0,p,q]
- test: JPC1
  state: [1,1,1,0,0,k,l]
  bitM: Ikl
  set8: [1,0,1,1]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: &jpc1 [1,1,1,0,1,k,l]
- test: JPC2
  state: *jpc1
  bitM: Iklz
  set8: [1,0,1,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  miscFlags: [0,0,0,0,0]
  nextState: [z,z,0,0,0,z,0]
- test: LDHC0
  state: *Base0
  instr: [1,1,1,p,0,0,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [0,1,1,1]
  aluC: *CPR
  set16: [0,x,0,x,0,1,0,0]
  nextState: [p,0,0,p,0,0,1]
- test: LDHC1
  state: *Base1
  instr: [1,1,1,0,0,0,1,0]
  set8: [0,1,1,1]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: LDA160
  state: *Base0
  instr: [1,1,1,p,1,0,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [0,1,1,1]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: [0,0,0,1,p,0,0]
- test: LDA161
  state: [0,0,0,1,j,0,0]
  bitM: Ij
  set8: [1,1,0,1]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: &ldn161 [0,0,0,1,j,0,1]
- test: LDA162
  state: *ldn161
  bitM: Ij
  set8: [1,1,0,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *NCAA
  nextState: &ldn162 [0,0,0,1,j,1,0]
- test: LDA163
  state: *ldn162
  bitM: Ij
  set8: [0,1,1,j]
  aluR: [0,1,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  miscFlags: [x,0,0,0,'!j']
  nextState: *Base0
- test: JP0
  state: *Base0
  instr: [1,1,0,p,0,0,1,1]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: &jp0 [1,1,0,0,0,0,0]
- test: JP1
  state: *jp0
  bitM: I
  set8: [1,0,1,1]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: &jp1 [1,1,0,0,0,0,1]
- test: JP2
  state: *jp1
  bitM: I
  set8: [1,0,1,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: [0,x,0]
  miscFlags: [0,0,0,0,0]
  nextState: &jp2 [1,1,0,0,0,1,0]
- test: JP3
  state: *jp2
  bitM: I
  set8: [0,1,1,0]
  set16: &finjp [0,x,0,x,x,x,0,1]
  nextState: *Base0
- test: DEI
  state: *Base0
  instr: [1,1,1,p,q,0,1,1]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  miscFlags: [x,q,'!q',0,0]
  nextState: *Base0
- test: CALLC0
  state: *Base0
  instr: [1,1,o,p,q,1,0,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: [1,1,1,1,0,p,q]
- test: CALLC1
  state: [1,1,1,1,0,k,l]
  bitM: Ikl
  set8: [1,0,1,1]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: &callc1 [1,1,1,1,1,k,l]
- test: CALLC2
  state: *callc1
  bitM: Iklz
  set8: [1,0,1,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  miscFlags: [0,0,0,0,0]
  nextState: [z,z,0,0,z,z,0]
- test: PUSH0
  state: *Base0
  instr: [1,1,o,p,0,1,0,1]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [0,o,p,u]
  aluC: *CPR
  set16: &PS16 [0,x,1,0,1,1,0,0]
  b16: [1,1]
  id: &DSP [1,0,1]
  nextState: *Base1
- test: PUSH1
  state: *Base1
  instr: [1,1,o,p,0,1,0,1]
  set8: [0,1,1,0]
  set16: *NVC
  miscFlags: *jWT
  nextState: *Base3
- test: PUSH2
  state: *Base3
  instr: [1,1,o,p,0,1,0,1]
  set8: [0,1,1,0]
  aluR: [u,o,'&!op',1]
  aluC: *CPR
  set16: *PS16
  b16: [1,1]
  id: *DSP
  nextState: [1,0,0,0,0,1,1]
- test: CALL0
  state: *Base0
  instr: [1,1,o,p,1,1,0,1]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id16: *IIP
  nextState: &call0 [1,1,0,0,1,0,0]
- test: CALL1
  state: *call0
  bitsM: ""
  set8: [1,0,1,1]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  nextState: &call1 [1,1,0,0,1,0,1]
- test: CALL2
  state: *call1
  bitsM: ""
  set8: [1,0,1,0]
  aluR: [1,0,1,0]
  aluC: *CPR
  set16: *jiIP
  id: *IIP
  miscFlags: [0,0,0,0,0]
  nextState: &call2 [1,1,0,0,1,1,0]
- test: CALL3
  state: *call2
  bitsM: ""
  set8: [0,1,1,0]
  aluR: [1,0,0,0]
  aluC: *CPR
  set16: *PS16
  b16: [1,1]
  id: *DSP
  miscFlags: [0,0,0,0,0]
  nextState: &call3 [1,1,0,0,1,1,1]
- test: CALL4
  state: *call3
  bitsM: ""
  set8: [0,1,1,0]
  aluR: [1,0,0,1]
  aluC: *CPR
  set16: *PS16
  b16: [1,1]
  id: *DSP
  miscFlags: [0,0,0,0,1]
  nextState: &call4 [1,1,0,0,0,1,1]
- test: CALL5
  state: *call4
  bitsM: ""
  set8: [0,1,1,0]
  set16: *finjp
  miscFlags: [0,0,0,0,1]
  nextState: *Base0
- test: MTHI0
  state: *Base0
  instr: [1,1,o,p,q,1,1,0]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: [1,1,0,1,o,p,q]
- test: MTHI1
  state: [1,1,0,1,j,k,l]
  bitsM: jkl
  aluR: [1,0,1,0]
  aluL: [0,0]
  fS: []
  fR: []
  fM: []
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: ARTHI
  state: [1,1,0,1,0,k,l]
  bitsM: klC
  set8: [0,1,1,1]
  aluC: [1,1,1,0,1,k,'^k&Cl']
  fS: [k,0,0]
  fR: [1,0,1,1]
  fM: [1,0,1,1]
- test: AORI
  state: [1,1,0,1,1,k,0]
  bitsM: k
  set8: [0,1,1,1]
  aluC: [1,0,1,k,1,k,x,k]
  fS: [0,'!k',0]
  fR: [1,0,0,0]
  fM: [1,0]
- test: XORI
  state: [1,1,0,1,1,0,1]
  bitsM: ""
  set8: [0,1,1,1]
  aluC: [0,0,1,0,1,0]
  fR: [1,0,0,0]
  fM: [1,0]
- test: CPI
  state: [1,1,0,1,1,1,1]
  bitsM: ""
  set8: [0,1,1,0]
  aluC: [1,1,1,0,1,1,1]
  fS: [1,0,0]
  fR: [1,x,1,1]
  fM: [1,0,1,1]
- test: RST0
  state: *Base0
  instr: [1,1,o,p,q,1,1,1]
  iFlag: 0
  set8: [0,1,1,0]
  aluR: [1,0,0,1]
  aluC: [1,1,0,0,1,0,1]
  set16: *NVC
  miscFlags: [1,0,0,0,0]
  nextState: *Base1
- test: RST1
  state: *Base1
  instr: [1,1,o,p,q,1,1,1]
  bitsM: opqc
  set8: [0,1,1,0]
  aluR: [1,0,0,0]
  aluC: [1,1,0,0,1,0,c]
  set16: *PS16
  b16: [1,1]
  id: *DSP
  miscFlags: [0,0,0,0,0]
  nextState: *Base3
- test: RST2
  state: *Base3
  instr: [1,1,o,p,q,1,1,1]
  set8: [0,1,1,0]
  aluR: [1,0,0,1]
  aluC: [1,1,0,0,1,0,1]
  set16: *PS16
  b16: [1,1]
  id: *DSP
  miscFlags: [0,0,0,0,1]
  nextState: *call4
- test: INTER0
  state: *Base0
  iFlag: 1
  set8: [0,1,1,0]
  aluR: [1,0,0,0]
  aluC: *CPR
  set16: *PS16
  b16: [1,1]
  id: *DSP
  miscFlags: [1,0,1,0,0]
  nextState: &inter [0,0,1,0,0,0,0]
- test: INTER1
  state: *inter
  bitsM: ""
  set8: [0,1,1,0]
  aluR: [1,0,0,1]
  aluC: *CPR
  set16: *PS16
  b16: [1,1]
  id: *DSP
  miscFlags: [0,0,0,0,1]
  nextState: *call4
- test: nop
  state: [0,1,0,0,0,0,0]
  set8: [0,1,1,0]
  set16: *NVC
  nextState: *Base0
- test: CB0
  state: *Base0
  instr: [1,1,0,p,1,0,1,1]
  iFlag: 0
  set8: [0,1,1,0]
  set16: *jiIP
  id: *IIP
  nextState: &cb0 [0,0,1,0,1,0,0]
- test: CB1
  state: *cb0
  cond: '!v'
  bitsM: mnrst
  set8: [0,'|r&!mn','|s&!mn','&t|m!n']
  aluR: [0,r,s,t]
  fS: &DC []
  fR: *DC
  fM: *DC
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: CBHL1
  state: *cb0
  instr: [m,'n',o,p,q,1,1,0]
  bitsM: ""
  set8: [0,1,1,0]
  fS: *DC
  fR: *DC
  fM: *DC
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: &cb1 [0,0,1,0,1,0,1]
- test: CBHL2a
  state: *cb1
  instr: [m,'n',o,p,q,1,1,0]
  cond: '|m!n'
  bitsM: mn
  set8: [0,1,1,0]
  aluR: [0,1,1,0]
  fS: *DC
  fR: *DC
  fM: *DC
  set16: [0,x,0,x,1,1,0,0]
  b16: [1,0]
  nextState: [0,0,0,1,0,1,0]
- test: CBHL2b
  state: *cb1
  instr: [0,1,o,p,q,1,1,0]
  bitsM: ""
  set8: [0,1,1,0]
  aluR: [0,1,1,0]
  fS: *DC
  fR: *DC
  fM: *DC
  set16: *jiIP
  id: *IIP
  nextState: *Base0
- test: SH
  state: &cbl [0,0,1,0,1,0,l]
  instr: [0,0,o,p,q,r,s,t]
  cond: '!|u&|!po&v!l'
  bitsM: lopqrst
  fS: *DC
  fR: *DC
  fM: [1,0,x,'|!vl']
- test: SHb
  state: *cbl
  instr: [0,0,o,p,q,r,s,t]
  fR: [1,0,0,'!u']
  fM: [1,0]
- test: RLC
  state: *cbl
  instr: [0,0,0,0,0,r,s,t]
  aluC: *CRLC
  fR: *DC
  fM: *DC
- test: RRC
  state: *cbl
  instr: [0,0,0,0,1,r,s,t]
  aluC: *CRRC
  fR: *DC
  fM: *DC
- test: RL
  state: *cbl
  instr: [0,0,0,1,0,r,s,t]
  aluC: *CRL
  fR: *DC
  fM: *DC
- test: RR
  state: *cbl
  instr: [0,0,0,1,1,r,s,t]
  aluC: *CRR
  fR: *DC
  fM: *DC
- test: SL
  state: *cbl
  instr: [0,0,1,0,0,r,s,t]
  aluC: [0,1,1,0,0,0,0,0]
  fR: *DC
  fM: *DC
- test: SRA
  state: *cbl
  instr: [0,0,1,0,1,r,s,t]
  aluC: [0,1,x,x,x,0,1,1]
  fR: *DC
  fM: *DC
- test: SWAP
  state: *cbl
  instr: [0,0,1,1,0,r,s,t]
  aluC: [0,1,x,x,x,0,0,1]
  fR: *DC
  fM: *DC
- test: SRL
  state: *cbl
  instr: [0,0,1,1,1,r,s,t]
  aluC: [0,1,0,0,1,0,1,0]
  fR: *DC
  fM: *DC
- test: BIT
  state: *cbl
  instr: [0,1,o,p,q,r,s,t]
  aluC: [0,1,o,p,q,1,x,1]
  fS: [0,1,0]
  fR: [1,0,x,1]
  fM: [1,0,x,0]
- test: SRB
  state: *cbl
  instr: [1,'n',o,p,q,r,s,t]
  aluC: [0,1,o,p,q,1,'n',1]
